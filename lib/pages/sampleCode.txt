import 'dart:io';
import 'package:caritas/generators/uuid_generator.dart';
import 'package:caritas/home.dart';
import 'package:caritas/widgets/button_widgets.dart';
import 'package:caritas/widgets/toast_messages.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart' as firebase_storage;
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:geocoding/geocoding.dart';
import 'package:geolocator/geolocator.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart';

class ListingCreationPage extends StatefulWidget {
  @override
  State<ListingCreationPage> createState() => _ListingCreationPageState();
}

class _ListingCreationPageState extends State<ListingCreationPage> {
  String _listingType = 'Donation'; // Must match one of the dropdown items
  String _communityType =
      'DORCAS Foundation'; // Must match one of the dropdown items

  final String userProfileID =
      FirebaseAuth.instance.currentUser!.uid.toString();

  bool isStartToUpload = false;
  bool isUploadComplete = false;
  bool isAnError = false;
  double? circularProgressVal;
  List<File> _selectedImages = [];
  String formattedDate = DateFormat('dd-MM-yyyy').format(DateTime.now());
  String formattedTime = DateFormat('kk:mm:a').format(DateTime.now());

  String donationID = UUIDGenerator().uuidV4();

  void _getImage(ImageSource source) async {
    final pickedFile = await ImagePicker().pickImage(source: source);
    if (pickedFile != null) {
      setState(() {
        if (_selectedImages.length < 4) {
          _selectedImages.add(File(pickedFile.path));
        }
      });
    }
  }

  void sendSuccessCode() {
    Navigator.pop(context);
    setState(() {
      isStartToUpload = false;
      isUploadComplete = true;
    });
    showAlertDialog(context);
  }

  void sendErrorCode(String error) {
    ToastMessages().showErrorToast(error);
    setState(() {
      isStartToUpload = false;
      isAnError = true;
      isUploadComplete = true;
    });
    showAlertDialog(context);
  }

  showAlertDialog(BuildContext context) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: !isUploadComplete
                  ? Center(child: Text("Chargement du message"))
                  : Center(child: Text("Chargement réussi")),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  if (!isUploadComplete)
                    !isAnError
                        ? Column(
                            mainAxisSize: MainAxisSize.min,
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              SizedBox(
                                height: 30.0,
                              ),
                              CircularProgressIndicator(
                                value: circularProgressVal,
                                strokeWidth: 6,
                                valueColor: AlwaysStoppedAnimation<Color>(
                                    Colors.teal.shade700),
                              ),
                              SizedBox(
                                height: 30.0,
                              ),
                              Text(
                                  "Veuillez attendre que votre message soit téléchargé.",
                                  textAlign: TextAlign.center,
                                  style: TextStyle(
                                          fontFamily: 'Montserrat',
                                          fontSize: 16.0)
                                      .copyWith(color: Colors.grey.shade900)),
                            ],
                          )
                        : Column(
                            children: [
                              Text("Erreur!",
                                  style: TextStyle(
                                    fontSize: 22,
                                    fontWeight: FontWeight.bold,
                                  )),
                              SizedBox(
                                height: 50.0,
                              ),
                              ButtonWidget(
                                  text: "Réessayer",
                                  textColor: Colors.white,
                                  color: Colors.red,
                                  onClicked: () {
                                    Navigator.pop(context);
                                  }),
                            ],
                          )
                  else
                    Center(
                      child: Padding(
                        padding: const EdgeInsets.only(top: 5.0),
                        child: Column(
                          children: [
                            Image.asset(
                              'assets/images/welcome.png',
                              height: 50,
                              width: 50,
                            ),
                            SizedBox(height: 30),
                            Text("Le message a été chargé!",
                                textAlign: TextAlign.center,
                                style: TextStyle(
                                        fontFamily: 'Montserrat',
                                        fontSize: 22.0)
                                    .copyWith(
                                        color: Colors.grey.shade900,
                                        fontWeight: FontWeight.bold)),
                            SizedBox(height: 50),
                            ButtonWidget(
                                text: "Continue",
                                textColor: Colors.white,
                                color: Colors.indigo,
                                onClicked: () {
                                  Navigator.pushAndRemoveUntil(
                                    context,
                                    MaterialPageRoute(
                                      builder: (BuildContext context) =>
                                          HomePage(),
                                    ),
                                    (route) => false,
                                  );
                                }),
                          ],
                        ),
                      ),
                    )
                ],
              ),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.all(Radius.circular(20.0))),
            );
          },
        );
      },
    );
  }

  Future<void> uploadImageToStorage() async {
    List<String> imageList = [];
    try {
      for (var image in _selectedImages) {
        final ref = firebase_storage.FirebaseStorage.instance
            .ref()
            .child('donation_images/$userProfileID/$donationID')
            .child(DateTime.now().millisecondsSinceEpoch.toString());
        await ref.putFile(image);
        final imageUrl = await ref.getDownloadURL();
        imageList.add(imageUrl);
      }
      addDonToFireStore(imageList);
    } catch (e) {
      sendErrorCode(e.toString());
    }
  }

  Future<void> addDonToFireStore(List<String> imageList) async {
    FirebaseFirestore.instance
        .collection('Users')
        .doc(userProfileID)
        .collection('donations')
        .doc(donationID)
        .set({
          'donationID': donationID,
          'donorID': userProfileID,
          'donationType': _listingType,
          'communityType': _communityType,
          'donationTitle': _controller.text,
          'donationDescription': _descriptionController.text,
          'donationDate': "$formattedDate, $formattedTime",
          'donationImages': imageList,
          'donationStatus': 'Pending',
          'donationBestBefore': selectedDate,
          'donationAvailability': selectedAction,
        })
        .then(
          (value) => sendSuccessCode(),
        )
        .catchError((error) => sendErrorCode(error.toString()));
  }

  void validateDonation() {
    if (_selectedImages.isEmpty) {
      ToastMessages().showErrorToast('Please select at least one image');
    } else if (_controller.text.isEmpty) {
      ToastMessages().showErrorToast('Please enter a title');
    } else if (_descriptionController.text.isEmpty) {
      ToastMessages().showErrorToast('Please enter a description');
    } else if (selectedAction.isEmpty) {
      ToastMessages().showErrorToast('Please select an availability');
    } else if (selectedDate == null) {
      ToastMessages().showErrorToast('Please select a best before date');
    } else {
      setState(() {
        isStartToUpload = true;
        circularProgressVal = 0.1;
      });
      showAlertDialog(context);
      uploadImageToStorage();
    }
  }

  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _controller = TextEditingController();
  final int maxTitleLength = 50;
  final int maxDescriptionLength = 500;

  String selectedAction = '';
  DateTime? selectedDate;
  bool isSwitched = false;

  GoogleMapController? mapController;
  LatLng? selectedLocation;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Create Donation'),
      ),
      body: ListView(
        padding: EdgeInsets.all(16),
        children: [
          GestureDetector(
            onTap: () {
              // Navigate to the page with information about allowed food types
            },
            child: const Center(
              child: Text(
                'What type of food are allowed on Caritas?',
                style: TextStyle(color: Colors.blue),
              ),
            ),
          ),
          SizedBox(height: 16),
          //_buildListingType(),
          SizedBox(height: 24),
          //_buildLocalCommunity(),
          SizedBox(height: 16),
          _buildLocation(),
          _buildPhotosContainer(),
          _buildTitle(),
          _buildDescription(),
          _buildKilogramme(),
          _buildAvailabilities(),
          Divider(),
          _buildBestBefore(),
          SizedBox(height: 24),
          SizedBox(
            width: double.infinity,
            height: 50,
            child: ElevatedButton(
              onPressed: () {
                validateDonation();
              },
              child: Text('Validate Donation',
                  style: TextStyle(
                      fontSize: 20,
                      color: Colors.white,
                      fontWeight: FontWeight.w400)),
              style: ElevatedButton.styleFrom(
                backgroundColor: Color.fromARGB(255, 203, 152, 206),
                shape: const RoundedRectangleBorder(
                  borderRadius: BorderRadius.all(Radius.circular(20)),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Widget _buildListingType() {
  //   return DropdownButtonFormField<String>(
  //     value: _listingType,
  //     onChanged: (newValue) {
  //       setState(() {
  //         _listingType = newValue!;
  //       });
  //     },
  //     items: _listingType.map<DropdownMenuItem<String>>((String value) {
  //       print('ListingType Item: $value'); // Debugging line
  //       return DropdownMenuItem<String>(
  //         value: value,
  //         child: Text(value),
  //       );
  //     }).toList(),
  //     decoration: InputDecoration(
  //       labelText: 'Listing Type',
  //       border: OutlineInputBorder(),
  //     ),
  //   );
  // }

  // Widget _buildLocalCommunity() {
  //   return DropdownButtonFormField<String>(
  //     value: _communityType,
  //     onChanged: (newValue) {
  //       setState(() {
  //         _communityType = newValue!;
  //       });
  //     },
  //     items: _communityType.map<DropdownMenuItem<String>>((String value) {
  //       print('CommunityType Item: $value'); // Debugging line
  //       return DropdownMenuItem<String>(
  //         value: value,
  //         child: Text(value),
  //       );
  //     }).toList(),
  //     decoration: InputDecoration(
  //       labelText: 'Local Community',
  //       border: OutlineInputBorder(),
  //     ),
  //   );
  // }

  Widget _buildLocation() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('Location'),
        SizedBox(height: 8),
        Container(
          height: 200,
          child: GoogleMap(
            onMapCreated: (controller) {
              mapController = controller;
            },
            initialCameraPosition: CameraPosition(
              target: LatLng(4.04827, 9.70428), // Example coordinates
              zoom: 12,
            ),
            markers: selectedLocation != null
                ? {
                    Marker(
                      markerId: MarkerId('selected-location'),
                      position: selectedLocation!,
                    )
                  }
                : {},
            onTap: (position) {
              setState(() {
                selectedLocation = position;
              });
            },
          ),
        ),
      ],
    );
  }

  Widget _buildPhotosContainer() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('Photos'),
        SizedBox(height: 8),
        GridView.builder(
          shrinkWrap: true,
          physics: NeverScrollableScrollPhysics(),
          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            mainAxisSpacing: 8,
            crossAxisSpacing: 8,
          ),
          itemCount: _selectedImages.length + 1,
          itemBuilder: (context, index) {
            if (index == _selectedImages.length) {
              return GestureDetector(
                onTap: () => _getImage(ImageSource.gallery),
                child: Container(
                  color: Colors.grey[300],
                  child: Icon(Icons.add_a_photo, size: 50),
                ),
              );
            } else {
              return Stack(
                fit: StackFit.expand,
                children: [
                  Image.file(_selectedImages[index], fit: BoxFit.cover),
                  Positioned(
                    top: 0,
                    right: 0,
                    child: GestureDetector(
                      onTap: () {
                        setState(() {
                          _selectedImages.removeAt(index);
                        });
                      },
                      child: Container(
                        color: Colors.black54,
                        child: Icon(Icons.close, color: Colors.white),
                      ),
                    ),
                  ),
                ],
              );
            }
          },
        ),
      ],
    );
  }

  Widget _buildTitle() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('Title'),
        SizedBox(height: 8),
        TextField(
          controller: _controller,
          maxLength: maxTitleLength,
          decoration: InputDecoration(
            border: OutlineInputBorder(),
          ),
        ),
      ],
    );
  }

  Widget _buildDescription() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('Description'),
        SizedBox(height: 8),
        TextField(
          controller: _descriptionController,
          maxLength: maxDescriptionLength,
          maxLines: 3,
          decoration: InputDecoration(
            border: OutlineInputBorder(),
          ),
        ),
      ],
    );
  }

  Widget _buildKilogramme() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('Kilogramme'),
        SizedBox(height: 8),
        TextField(
          controller: _descriptionController,
          maxLength: maxDescriptionLength,
          maxLines: 3,
          decoration: InputDecoration(
            border: OutlineInputBorder(),
          ),
        ),
        /* Row(
          children: [
            Expanded(
              child: Slider(
                value: _currentSliderValue,
                min: 0,
                max: 100,
                divisions: 10,
                label: _currentSliderValue.round().toString(),
                onChanged: (value) {
                  setState(() {
                    _currentSliderValue = value;
                  });
                },
              ),
            ),
            Container(
              width: 50,
              child: Text(
                '${_currentSliderValue.round()} Kg',
                textAlign: TextAlign.center,
              ),
            ),
          ],
        ), */
      ],
    );
  }

  Widget _buildAvailabilities() {
    // Implement the widget for selecting availabilities
    return ListTile(
        leading: Icon(Icons.check_circle_outline),
        title: Row(
          children: [
            Text(
              'Avalaibility : ',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            Text(selectedAction)
          ],
        ),
        trailing: Icon(Icons.arrow_drop_down),
        onTap: () {
          // Navigate to the listing creation page for donation
          setState(() {
            _showModalBottomSheet();
          });
        });
  }

  void _showModalBottomSheet() {
    final options = [
      'Week Days',
      'Week Evening',
      'Weekend',
      'I am available',
      'Cancel',
    ];

    showModalBottomSheet<void>(
      context: context,
      builder: (BuildContext context) {
        return Column(mainAxisSize: MainAxisSize.min, children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Text(
              'Select Availability',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          Divider(), // Add a divider below the heading
          ...options.map((option) {
            return Column(
              mainAxisAlignment: MainAxisAlignment.center,
              mainAxisSize: MainAxisSize.min,
              children: [
                ListTile(
                  title: Text(option),
                  onTap: () {
                    if (option != 'Cancel') {
                      setState(() {
                        selectedAction = option;
                      });
                    }
                    Navigator.pop(context);
                  },
                ),
                Divider(),
              ],
            );
          }).toList(),
        ]);
      },
    );
  }

  Widget _buildBestBefore() {
    // Implement the food icon message widget
    return Column(
      children: [
        ListTile(
          leading: Icon(Icons.check_circle_outline),
          title: Text(
            'Best Before : ',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          subtitle: Text(
              selectedDate != null ? selectedDate.toString() : 'Select a date'),
          trailing: Icon(Icons.calendar_today),
          onTap: () {
            _showDatePicker(context);
          },
        ),
        Divider(),
      ],
    );
  }

  void _showDatePicker(BuildContext context) {
    showModalBottomSheet<void>(
      context: context,
      builder: (BuildContext context) {
        return Column(mainAxisSize: MainAxisSize.min, children: [
          const ListTile(
              title: Center(
                child: Text(
                  'Select Expiration Date',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              trailing: Text(
                'Done',
                style: TextStyle(color: Colors.blue),
              )),
          Divider(),
          Container(
            height: 300,
            child: CupertinoDatePicker(
              mode: CupertinoDatePickerMode.date,
              initialDateTime: DateTime.now(),
              onDateTimeChanged: (DateTime newDate) {
                setState(() {
                  selectedDate = newDate;
                });
              },
            ),
          )
        ]);
      },
    );
  }
}
